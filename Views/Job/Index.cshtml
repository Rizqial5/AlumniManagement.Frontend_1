@model IEnumerable<AlumniManagement.Frontend.Models.JobModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <style>
        .dataTables_wrapper {
            width: 100%;
        }

            .dataTables_wrapper .dataTables_paginate {
                float: none;
                text-align: center;
            }

            .dataTables_wrapper .dataTables_info {
                float: left;
                padding-top: 0.755em;
            }

            .dataTables_wrapper .bottom {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
        th {
            white-space: nowrap;
        }
    </style>
}

<h2>Job History Of @ViewBag.FullName</h2>

<div>
    <a class="btn btn-danger" href="@Url.Action("Index","Alumni")">Back to Alumni</a>
    <button class="btn btn-primary" id="createButton" data-toggle="modal" data-target="#createModal">Add New</button>
    <button id="deleteSelected" class="btn btn-danger">Delete Selected</button>
</div>

<table class="table" id="jobData" style="width:100%">
    <thead>
        <tr>
            <th><input type="checkbox" id="selectAll" /></th>
            <th>Actions</th>
            <th>NO. </th>
            <th>
                Title
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Company)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModifiedDate)
            </th>
        </tr>
    </thead>
</table>

<div id="modalContainer"></div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    @Scripts.Render("~/bundles/custom")
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).ready(function () {
            $.fn.dataTable.ext.errMode = 'none';
            var table = $('#jobData').DataTable({
                "processing": true,
                "serverSide": false,
                "deferRender": true,   // Optimalkan rendering
                "stateSave": true,     // Simpan state saat refresh
                "bDestroy": true,      // Hindari error saat re-init
                "bAutoWidth": false,   // Hindari width yang salah
                "bSortCellsTop": true,
                "ajax": {
                    "url": "@Url.Action("GetJobs","Job", new {alumniId = ViewBag.AlumniId })",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": null, "width": "50px", "render": function (data, type, row) { return '<input type="checkbox" class="selectCheckbox" data-id="' + row.JobHistoryID + '" />'; } },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            var editLink = '@Url.Action("Edit", "Job", new { id = "PLACEHOLDER", alumniId = ViewBag.AlumniId })'.replace("PLACEHOLDER", row.JobHistoryID);

                            return '<div class="btn-group">' +
                                '<a  class="btn btn-primary"  data-id="' + row.JobHistoryID + '" data-alumniId="' + @ViewBag.AlumniId + '" id="editButton" data-toggle="modal" data-target="#editModal" style="margin-right: 5px;">' +
                                'Edit</a>' +
                                '<button id="deleteButton" class="btn btn-danger deleteButton" data-id="' + row.JobHistoryID + '">' +
                                'Delete</button>' +
                                '</div>'

                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + 1;  // Display the row number (meta.row is zero-indexed)
                        }
                    },
                    { "data": "JobTitle" },
                    { "data": "Company" },
                    {
                        "data": "ShowStartDate",
                        //"render": function (data, type, row) {
                        //    return moment(data).format('DD-MMM-YYYY');
                        //}
                    }, {
                        "data": "ShowEndDate",
                        //"render": function (data, type, row) {
                        //    return moment(data).format('DD-MMM-YYYY');
                        //}
                    },
                    { "data": "Description" },
                    {
                        "data": "ModifiedDate",
                        "render": function (data, type, row) {
                            return moment(data).format('DD-MMM-YYYY HH:mm:ss');
                        }
                    }
                ],
/*                "order": [[0, "desc"]],*/
                "dom": '<"top"f>rt<"bottom"lpi><"clear">', // search on the top right, show entries, paging, showing on the bottom
                "pagingType": "full_numbers",
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                //"pagingType": "simple_numbers",
                "pageLength": 10,
                "lengthMenu": [10, 25, 50, 100],
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                "language": {
                    "paginate": {
                        "previous": "Previous",
                        "next": "Next",
                        "first": "<<",
                        "last": ">>"
                    }
                }
            });

            $('#selectAll').on('click', function () {
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input[type="checkbox"]', rows).prop('checked', this.checked)
            })
        });

        $('#jobData').on('error.dt', function (e, settings, techNote, message) {
            console.log('DataTables error:', message);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "An error occurred while loading data."
            });
        });

        ////Use this for datatables, becase the buttons are created dynamically
        $(document).on('click', '#deleteButton', function () {
            const itemId = $(this).data('id'); // Retrieve the ID of the item to delete

            Swal.fire({
                title: "Are you sure?",
                text: "Once deleted, you will not be able to recover this item!",
                icon: "warning",
                showCancelButton: true, // Enable the cancel button
                buttons: true,
                dangerMode: true,
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: "Processing...",
                            text: "Please wait while we delete the item.",
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            willOpen: () => {
                                Swal.showLoading(); // Menampilkan animasi loading
                            }
                        });
                        $.ajax({
                            url: '/Job/Delete', // URL of your Delete method
                            type: 'POST', // Use POST for data modification
                            data: { id: itemId, alumniId : @ViewBag.AlumniId }, // Pass the ID as data
                            success: function (response) {
                                Swal.close();
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        $("#jobData").DataTable().ajax.reload(); // Reload the page or update UI
                                    });


                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                                //.then(() => {
                                //    // Optional: Reload the page or update the UI
                                //    location.reload();
                                //});
                            },
                            error: function (error) {
                                Swal.close();
                                Swal.fire("Error!", "Unable to delete the item " + response.message + " . Please try again.", "error");
                            }
                        });
                    } else if (result.dismiss == Swal.DismissReason.cancel) {
                        Swal.fire("Your item is safe!");
                    }
                });
        });

        $(document).ready(function () {
            var table = $('#jobData').DataTable();

            // Unbind the default search event
            $('#jobData_filter input').unbind();

            // Bind a new event handler
            $('#jobData_filter input').on('keyup', function (e) {
                var value = $(this).val();
                if (value.length >= 3 || value.length === 0) {
                    table.search(value).draw();
                }
            });
        });

         //mengatur partial views yang ada pada create
         $(document).on('click', '#createButton', function () {

             $.ajax({
                 url: '@Url.Action("Create", "Job", new {alumniId= ViewBag.AlumniId })',
                 type: 'GET',
                 success: function(data) {
                     $('#modalContainer').html(data);
                     var myModal = new bootstrap.Modal(document.getElementById('createModal'));

                     //inisialisasi
                     reinitializeValidation();

                     $(function () {

                         var today = new Date();
                         today.setDate(today.getDate() + 1); // Add one day
                         var todayString = today.toISOString().split('T')[0];

                         $("#StartDate").attr("max", todayString).on("change", function () {
                             var startDate = $(this).val();
                             $("#EndDate").attr("min", startDate).attr("max", todayString);
                             if ($("#EndDate").val() < startDate || $("#EndDate").val() > todayString) {
                                 $("#EndDate").val(startDate);
                             }
                         });

                         $("#EndDate").attr("max", todayString).on("change", function () {
                             var endDate = $(this).val();
                             var startDate = $("#StartDate").val();
                             if (endDate < startDate || endDate > todayString) {
                                 $(this).val(startDate);
                             }
                         });
                     });

                     myModal.show();
                     myModal.modal('show');
                 },
                 error: function (xhr) {
                     // Menampilkan pesan error dari response JSON
                     let errorMessage = xhr.responseJSON && xhr.responseJSON.message
                         ? xhr.responseJSON.message
                         : "An unknown error occurred";

                     Swal.fire("Error Load Form", errorMessage, "error");
                 }
             });
         });

        $(document).on('click', '#editButton', function () {
            var jobId = $(this).data('id'); // Get the ProductCategoryID from the button's data-id attribute
            var alumniId = $(this).data('alumniid');

            // Make an AJAX request to get the data for the selected ProductCategory
            $.ajax({
                url: '/Job/Edit', // URL to fetch data for the specific category
                type: 'GET',
                data: { id: jobId, alumniId: alumniId },
                success: function (data) {

                    // Show the Edit Modal
                    $('#modalContainer').html(data);

                    //inisialisasi
                    reinitializeValidation();



                    $('#editModal').modal('show');
                },
                error: function (xhr) {
                    // Menampilkan pesan error dari response JSON
                    let errorMessage = xhr.responseJSON && xhr.responseJSON.message
                        ? xhr.responseJSON.message
                        : "An unknown error occurred";

                    Swal.fire("Error Load Form", errorMessage, "error");
                }
            });
        });

        $('#deleteSelected').on('click', function () {
            var selectedIds = [];
            var alumniId = @ViewBag.AlumniId;

            $('.selectCheckbox:checked').each(function () {
                selectedIds.push($(this).data('id'));
            });

            if (selectedIds.length > 0) {
                Swal.fire({
                    title: "Are you sure? you will not be able to recover these items!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete them!",
                    cancelButtonText: "No, keep them"
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: "Processing...",
                            text: "Please wait while we delete the item.",
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            willOpen: () => {
                                Swal.showLoading(); // Menampilkan animasi loading
                            }
                        });

                        // Make an AJAX call to delete the selected items
                        $.ajax({
                            url: '/Job/DeleteSelected/',
                            type: 'POST',
                            data: { ids: selectedIds, alumniId: alumniId },
                            traditional: true,
                            success: function (response) {
                                Swal.close();
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        $('#jobData').DataTable().ajax.reload(); // Reload the DataTable
                                    });
                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                            },
                            error: function (error) {
                                Swal.close();
                                Swal.fire("Error!", "Unable to delete the items. Please try again.", "error");
                            }
                        });
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire("Cancelled", "Your items are safe :)", "error");
                    }
                });
            } else {
                Swal.fire("No items selected", "Please select items to delete.", "info");
            }
        });
    </script>

}

