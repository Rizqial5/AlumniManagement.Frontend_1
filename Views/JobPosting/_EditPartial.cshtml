@model AlumniManagement.Frontend.Models.JobPostingModel


<div id="editModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Job Posting</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Edit", "JobPosting", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="JobID" value="@Model.JobID.ToString("N")"   />
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmploymentTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.EmploymentTypeID, Model.EmployemenTypeDDL, "Select Type",
                    new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.EmploymentTypeID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MinimumExperience, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MinimumExperience, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MinimumExperience, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.JobDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.JobDescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.JobDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedSkills, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(model => model.SelectedSkills, new MultiSelectList(Model.SkillDDL, "Value", "Text"), new { @id = "ddlSkills", @class = "form-control", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.SelectedSkills, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("SelectedAttachmentTypes", "Attachment Types", new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @if (ViewBag.AttachmentDDL != null)
                                {
                                    var selectedAttachments = Model.AttachMentCheckBox?.Select(a => a.AttachmentTypeID).ToList() ?? new List<byte>();

                                    foreach (var item in ViewBag.AttachmentDDL)
                                    {
                                        bool isChecked = selectedAttachments.Contains((byte)item.AttachmentTypeID);

                                        <div class="form-check">
                                            <input type="checkbox" name="SelectedAttachmentTypes" value="@item.AttachmentTypeID"
                                                   class="form-check-input" id="attachment_@item.AttachmentTypeID"
                                                   @(isChecked ? "checked" : "") />
                                            <label class="form-check-label" for="attachment_@item.AttachmentTypeID">@item.Name</label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">No attachment types available.</p>
                                }
                                @Html.ValidationMessage("SelectedAttachmentTypes", "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="form-check form-switch">
                                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input", id = "isActiveSwitch" })
                                    <label class="form-check-label" for="isActiveSwitch">Active / Inactive</label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsClosed, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="form-check form-switch">
                                    @Html.CheckBox("IsClosed", Model.IsClosed, new { @class = "form-check-input", id = "isClosedSwitch" })
                                    <label class="form-check-label" for="isClosedSwitch">Active / Inactive</label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsClosed, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="d-flex justify-content-end mt-3">
                            <button type="button" class="btn btn-danger px-4 py-2 me-2" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary px-4 py-2">Save</button>
                        </div>
                    </div>
                }


            </div>
        </div>
    </div>
</div>


