@model AlumniManagement.Frontend.Models.EventModel


<div id="createModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal">
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("UpsertEvent", "Event", FormMethod.Post, new { id = "createForm", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group date" id="StartDatePicker">
                                @Html.TextBoxFor(model => model.StartDate, "{0:dd-MMM-yyyy}", new { @class = "form-control", @id = "StartDate", autocomplete = "off" })
                            </div>
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group date" id="EndDatePicker">
                                @Html.TextBoxFor(model => model.EndDate, "{0:dd-MMM-yyyy}", new { @class = "form-control", @id = "EndDate", autocomplete = "off" })
                            </div>
                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventImagePath, "Upload Photo", htmlAttributes: new { @class = "control-label col-md-8" })
                        <div class="col-md-10">
                            <input type="file" id="photoUpload" name="photoUpload" class="form-control" accept=".jpeg,.jpg,.png" />
                            <small class="text-muted">Only .jpeg, .jpg, .png files allowed. Max size: 3MB.</small>
                            @Html.ValidationMessageFor(model => model.EventImagePath, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group mt-2">
                        <img id="photoPreview" src="#" alt="Photo Preview" class="img-thumbnail d-none" style="max-width: 100px; max-height: 100px;" />
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.IsClosed, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="form-check form-switch">
                                @Html.CheckBox("IsClosed", Model.IsClosed, new { @class = "form-check-input", id = "isClosedSwitch" })
                                <label class="form-check-label" for="isClosedSwitch">
                                    <span id="isClosedLabel">@(Model.IsClosed ? "Closed" : "Open")</span>
                                </label>
                            </div>
                        </div>
                    </div>



                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn btn-danger px-4 py-2 me-2" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary px-4 py-2">Create</button>
                    </div>

                </div>
                }


            </div>
        </div>
    </div>
</div>


