//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlumniManagement.Frontend.PhotoAlbumService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoAlbumDTO", Namespace="http://schemas.datacontract.org/2004/07/AlumniManagement.WCF.Entities")]
    [System.SerializableAttribute()]
    public partial class PhotoAlbumDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThumbnailPhotoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThumbnailPhoto {
            get {
                return this.ThumbnailPhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailPhotoField, value) != true)) {
                    this.ThumbnailPhotoField = value;
                    this.RaisePropertyChanged("ThumbnailPhoto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoDTO", Namespace="http://schemas.datacontract.org/2004/07/AlumniManagement.WCF.Entities")]
    [System.SerializableAttribute()]
    public partial class PhotoDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPhotoAlbumThumbnailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoFilleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhotoIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPhotoAlbumThumbnail {
            get {
                return this.IsPhotoAlbumThumbnailField;
            }
            set {
                if ((this.IsPhotoAlbumThumbnailField.Equals(value) != true)) {
                    this.IsPhotoAlbumThumbnailField = value;
                    this.RaisePropertyChanged("IsPhotoAlbumThumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoFilleName {
            get {
                return this.PhotoFilleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoFilleNameField, value) != true)) {
                    this.PhotoFilleNameField = value;
                    this.RaisePropertyChanged("PhotoFilleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoID {
            get {
                return this.PhotoIDField;
            }
            set {
                if ((this.PhotoIDField.Equals(value) != true)) {
                    this.PhotoIDField = value;
                    this.RaisePropertyChanged("PhotoID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoPath {
            get {
                return this.PhotoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoPathField, value) != true)) {
                    this.PhotoPathField = value;
                    this.RaisePropertyChanged("PhotoPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoAlbumService.IPhotoAlbumService")]
    public interface IPhotoAlbumService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbums", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumsResponse")]
        AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO[] GetPhotoAlbums();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbums", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumsResponse")]
        System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO[]> GetPhotoAlbumsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetAllPhotoByAlbumId", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetAllPhotoByAlbumIdResponse")]
        AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO[] GetAllPhotoByAlbumId(int AlbumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetAllPhotoByAlbumId", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetAllPhotoByAlbumIdResponse")]
        System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO[]> GetAllPhotoByAlbumIdAsync(int AlbumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumById", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumByIdResponse")]
        AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO GetPhotoAlbumById(int AlbumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumById", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoAlbumByIdResponse")]
        System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO> GetPhotoAlbumByIdAsync(int AlbumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoByAlbumIdAndPhotoId", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoByAlbumIdAndPhotoIdResponse")]
        AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO GetPhotoByAlbumIdAndPhotoId(int AlbumId, int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotoByAlbumIdAndPhotoId", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotoByAlbumIdAndPhotoIdResponse")]
        System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO> GetPhotoByAlbumIdAndPhotoIdAsync(int AlbumId, int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/InsertPhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/InsertPhotoAlbumResponse")]
        void InsertPhotoAlbum(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/InsertPhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/InsertPhotoAlbumResponse")]
        System.Threading.Tasks.Task InsertPhotoAlbumAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/InsertPhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/InsertPhotoResponse")]
        void InsertPhoto(AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO photo, int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/InsertPhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/InsertPhotoResponse")]
        System.Threading.Tasks.Task InsertPhotoAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO photo, int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/UpdatePhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/UpdatePhotoAlbumResponse")]
        void UpdatePhotoAlbum(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/UpdatePhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/UpdatePhotoAlbumResponse")]
        System.Threading.Tasks.Task UpdatePhotoAlbumAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoAlbumResponse")]
        void DeletePhotoAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhotoAlbum", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoAlbumResponse")]
        System.Threading.Tasks.Task DeletePhotoAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoResponse")]
        void DeletePhoto(int albumID, int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(int albumID, int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/SetThumbnail", ReplyAction="http://tempuri.org/IPhotoAlbumService/SetThumbnailResponse")]
        void SetThumbnail(int photoId, int albumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/SetThumbnail", ReplyAction="http://tempuri.org/IPhotoAlbumService/SetThumbnailResponse")]
        System.Threading.Tasks.Task SetThumbnailAsync(int photoId, int albumId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoAlbumServiceChannel : AlumniManagement.Frontend.PhotoAlbumService.IPhotoAlbumService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoAlbumServiceClient : System.ServiceModel.ClientBase<AlumniManagement.Frontend.PhotoAlbumService.IPhotoAlbumService>, AlumniManagement.Frontend.PhotoAlbumService.IPhotoAlbumService {
        
        public PhotoAlbumServiceClient() {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoAlbumServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO[] GetPhotoAlbums() {
            return base.Channel.GetPhotoAlbums();
        }
        
        public System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO[]> GetPhotoAlbumsAsync() {
            return base.Channel.GetPhotoAlbumsAsync();
        }
        
        public AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO[] GetAllPhotoByAlbumId(int AlbumId) {
            return base.Channel.GetAllPhotoByAlbumId(AlbumId);
        }
        
        public System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO[]> GetAllPhotoByAlbumIdAsync(int AlbumId) {
            return base.Channel.GetAllPhotoByAlbumIdAsync(AlbumId);
        }
        
        public AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO GetPhotoAlbumById(int AlbumId) {
            return base.Channel.GetPhotoAlbumById(AlbumId);
        }
        
        public System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO> GetPhotoAlbumByIdAsync(int AlbumId) {
            return base.Channel.GetPhotoAlbumByIdAsync(AlbumId);
        }
        
        public AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO GetPhotoByAlbumIdAndPhotoId(int AlbumId, int photoId) {
            return base.Channel.GetPhotoByAlbumIdAndPhotoId(AlbumId, photoId);
        }
        
        public System.Threading.Tasks.Task<AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO> GetPhotoByAlbumIdAndPhotoIdAsync(int AlbumId, int photoId) {
            return base.Channel.GetPhotoByAlbumIdAndPhotoIdAsync(AlbumId, photoId);
        }
        
        public void InsertPhotoAlbum(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum) {
            base.Channel.InsertPhotoAlbum(photoAlbum);
        }
        
        public System.Threading.Tasks.Task InsertPhotoAlbumAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum) {
            return base.Channel.InsertPhotoAlbumAsync(photoAlbum);
        }
        
        public void InsertPhoto(AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO photo, int albumID) {
            base.Channel.InsertPhoto(photo, albumID);
        }
        
        public System.Threading.Tasks.Task InsertPhotoAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoDTO photo, int albumID) {
            return base.Channel.InsertPhotoAsync(photo, albumID);
        }
        
        public void UpdatePhotoAlbum(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum) {
            base.Channel.UpdatePhotoAlbum(photoAlbum);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAlbumAsync(AlumniManagement.Frontend.PhotoAlbumService.PhotoAlbumDTO photoAlbum) {
            return base.Channel.UpdatePhotoAlbumAsync(photoAlbum);
        }
        
        public void DeletePhotoAlbum(int albumID) {
            base.Channel.DeletePhotoAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAlbumAsync(int albumID) {
            return base.Channel.DeletePhotoAlbumAsync(albumID);
        }
        
        public void DeletePhoto(int albumID, int photoID) {
            base.Channel.DeletePhoto(albumID, photoID);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(int albumID, int photoID) {
            return base.Channel.DeletePhotoAsync(albumID, photoID);
        }
        
        public void SetThumbnail(int photoId, int albumId) {
            base.Channel.SetThumbnail(photoId, albumId);
        }
        
        public System.Threading.Tasks.Task SetThumbnailAsync(int photoId, int albumId) {
            return base.Channel.SetThumbnailAsync(photoId, albumId);
        }
    }
}
